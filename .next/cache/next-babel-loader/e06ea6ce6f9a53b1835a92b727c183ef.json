{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport Blockquote from './Blockquote';\nconst QuoteContainer = styled.div`\nmargin-bottom: 6rem;\nblockquote{\n        border-radius:5px;\n        background-color:${props => props.theme.colors.gray};\n        border-left: 5px solid ${props => props.theme.colors.blue};\n        font-family:\"Space Mono\", monospace;\n        margin:3rem 0;\n        padding-left: 2rem;\n        h2{\n            font-size:2.2rem;\n            color: ${props => props.theme.colors.blue};\n            margin: 1rem 0;\n            padding: 1rem 0 0 0;\n        }\n        p{\n            margin: 0 0 2rem 0;\n            padding: 0 0 2rem 0;\n            line-height:1.2;\n            font-size:2rem;\n        }\n    }\n`;\nconst ParagraphContainer = styled.div`\n    p{\n        font-size:2rem;\n        line-height:1.6;\n    }\n`;\n\nclass Quote extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      showParagraph: false\n    });\n\n    _defineProperty(this, \"_renderAnswer\", () => {\n      let copy = _objectSpread({}, this.props.answer);\n\n      let arrayOfPargraph = _Object$values(copy);\n\n      return arrayOfPargraph.map(paragraph => __jsx(\"p\", null, paragraph));\n    });\n\n    _defineProperty(this, \"toggleParagraph\", () => {\n      this.setState({\n        showParagraph: !this.state.showParagraph\n      }, () => {\n        if (this.pRef) {\n          console.log('üë®‚ÄçüöÄ', this.pRef);\n          window.scroll(0, this.pRef.offsetHeight);\n        }\n      });\n    });\n\n    this.pRef = React.createRef();\n  }\n\n  render() {\n    const props = this.props;\n    const {\n      showParagraph\n    } = this.state;\n    return __jsx(QuoteContainer, null, __jsx(Blockquote, {\n      title: props.title,\n      quote: props.quote,\n      toggleParagraph: this.toggleParagraph,\n      showParagraph: this.state.showParagraph\n    }), __jsx(\"div\", {\n      ref: this.pRef\n    }, props.answer && showParagraph ? __jsx(ParagraphContainer, null, this._renderAnswer()) : null));\n  }\n\n}\n\nexport default Quote;","map":null,"metadata":{},"sourceType":"module"}