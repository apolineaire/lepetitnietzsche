{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/pierre-emmanueldenys/lepetitnietzsche/src/components/Quote.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    p{\\n        font-size:2rem;\\n        line-height:1.6;\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nmargin-bottom: 6rem;\\nblockquote{\\n        border-radius:5px;\\n        background-color:\", \";\\n        border-left: 5px solid \", \";\\n        font-family:\\\"Space Mono\\\", monospace;\\n        margin:3rem 0;\\n        padding-left: 2rem;\\n        h2{\\n            font-size:2.2rem;\\n            color: \", \";\\n            margin: 1rem 0;\\n            padding: 1rem 0 0 0;\\n        }\\n        p{\\n            margin: 0 0 2rem 0;\\n            padding: 0 0 2rem 0;\\n            line-height:1.2;\\n            font-size:2rem;\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState } from 'react';\nimport React from 'react';\nimport styled from 'styled-components';\nvar QuoteContainer = styled.div(_templateObject(), function (props) {\n  return props.theme.colors.gray;\n}, function (props) {\n  return props.theme.colors.blue;\n}, function (props) {\n  return props.theme.colors.blue;\n});\nvar ParagraphContainer = styled.div(_templateObject2());\n\nvar Quote = function Quote(props) {\n  var _useState = useState(false),\n      showParagraph = _useState[0],\n      toggleParagraph = _useState[1]; // const [blockHeight, storeBlockHeight] = useState(0)\n\n\n  var _renderAnswer = function _renderAnswer() {\n    var copy = _objectSpread({}, props.answer);\n\n    var arrayOfPargraph = _Object$values(copy);\n\n    return arrayOfPargraph.map(function (paragraph) {\n      return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, paragraph);\n    });\n  };\n\n  var handleClickOnBlockquote = function handleClickOnBlockquote() {\n    return toggleParagraph(!showParagraph);\n  };\n\n  var handleBlockQuoteHeight = function handleBlockQuoteHeight(ref) {\n    ref = React.createRef();\n\n    if (ref) {\n      console.log('ref current', ref.current); // console.log('ref', ref.offsetHeight())\n    } // storeBlockHeight(blockHeight)\n\n  };\n\n  return __jsx(QuoteContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(\"blockquote\", {\n    ref: function ref(_ref) {\n      return handleBlockQuoteHeight(_ref);\n    },\n    onClick: function onClick() {\n      return handleClickOnBlockquote();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, props.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"-> \", props.quote)), props.answer && showParagraph ? __jsx(ParagraphContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, _renderAnswer()) : null);\n};\n\nexport default Quote;","map":{"version":3,"sources":["/Users/pierre-emmanueldenys/lepetitnietzsche/src/components/Quote.tsx"],"names":["QuoteContainer","styled","props","ParagraphContainer","Quote","showParagraph","toggleParagraph","useState","_renderAnswer","copy","arrayOfPargraph","handleClickOnBlockquote","handleBlockQuoteHeight","ref","React","console"],"mappings":"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","sourcesContent":["import {useState} from 'react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst QuoteContainer = styled.div`\nmargin-bottom: 6rem;\nblockquote{\n        border-radius:5px;\n        background-color:${props => props.theme.colors.gray};\n        border-left: 5px solid ${props => props.theme.colors.blue};\n        font-family:\"Space Mono\", monospace;\n        margin:3rem 0;\n        padding-left: 2rem;\n        h2{\n            font-size:2.2rem;\n            color: ${props => props.theme.colors.blue};\n            margin: 1rem 0;\n            padding: 1rem 0 0 0;\n        }\n        p{\n            margin: 0 0 2rem 0;\n            padding: 0 0 2rem 0;\n            line-height:1.2;\n            font-size:2rem;\n        }\n    }\n`\n\nconst ParagraphContainer = styled.div`\n    p{\n        font-size:2rem;\n        line-height:1.6;\n    }\n`\n\ninterface QuoteProps {\n    quote:string,\n    title:string,\n    answer:any,\n}\n\nconst Quote:any = (props:QuoteProps) => {\n\n    const [showParagraph, toggleParagraph] = useState(false)\n    // const [blockHeight, storeBlockHeight] = useState(0)\n\n    const _renderAnswer = ():JSX.Element[] => {\n        let copy = {...props.answer};\n        let arrayOfPargraph = Object.values(copy);\n        return arrayOfPargraph.map((paragraph:any) => <p>{paragraph}</p>)\n    }\n\n    const handleClickOnBlockquote =  ():void => toggleParagraph(!showParagraph)\n\n    const handleBlockQuoteHeight = (ref:any):void => {\n        ref = React.createRef()\n        if(ref){\n            console.log('ref current', ref.current)\n            // console.log('ref', ref.offsetHeight())\n        }\n        // storeBlockHeight(blockHeight)\n    }\n\n    return (\n        <QuoteContainer>\n            <blockquote ref={ref => handleBlockQuoteHeight(ref)} onClick={() => handleClickOnBlockquote()}>\n                <h2>{props.title}</h2>\n                <p>-> {props.quote}</p>\n            </blockquote>\n            {\n                props.answer && showParagraph ?\n                <ParagraphContainer>\n                {_renderAnswer()}\n                </ParagraphContainer>\n                :\n                null\n            }\n        </QuoteContainer>\n    )\n}\n\nexport default Quote\n"]},"metadata":{},"sourceType":"module"}